Python - Ideas clave:

	- El intérprete funciona interpretando instrucción por instrucción.
	- Siempre pyhton se instala en un lugar, y es un software.
	- Autocontenido.
	- Cuándo escribo pip para actualizar, qué pip llama mi consola?
	- Tipado dinámico de datos en las declaraciones.
	- En Pyhton no es correcto hablar de variables.
	- Todas las cosas que se declaran en Pyhton tienen un tipo, que se ve con type(lavariable).
	- Variedad de tipos básicos; bool, int, float, str...
	- En Python todo es un objeto.
	
Declaraciones:
Cada declaración involucra la creación de:

	- Una instancia: concretización de lo declarado.
	- Una referencia: el identificador/nombre que apunta a una instancia.
	- Por cada cosa que haga en python (funciones por ejemplo), python me crea una lista de referencias asociada.

¿Qué son los objetos?

	- Leng. con orientación a objetos generalizan el concepto de tipo de dato --> Clases.
	- Cada clase puede contener:
		- Atributos
		- Métodos
		(Operador punto)
	- El objeto es una instancia de una clase definida.
	
Objetos - ideas clave:

	- Una referencia no es equivalente a una instancia.
	- Las referencias (identificador) apuntan a objetos (instancias). Una referencia va a estar apuntando a algo (o nada).
	- Atributos y métodos son accesbiles con el punto.
	- Cada objeto tiene un tipo: la clase de la instancia.
	- Cada objeto tiene un identificador.
	
Tipos compuestos:

	- list: listas mutables y ordenadas de datos heterogéneos.
		- Puedo meter lo que quiera en una lista, 		objetos, no necesariamente números.
	
	- tuple: agrupaciones inmutables de objetos, también heterogéneos. Me permite hace una agrupación de objetos y encapsularlos para que sean trasladados. Paquetes de transmisión de datos.
	- set: agrupación no ordenada de elementos únicos.
	- dict: diccionario de objetos, indexados por etiquetas.

Clase 28 Septiembre:

- Puedo agregar métodos a cualquier objeto que se me ocurra, a una instancia que ya está definida.

- Función y método son lo mismo, método pertenece a la clase.

- Dos tipos de atributos en una clase:
	- Atributos de instancia.
	- Atributos de clase (mandarnos al psiquiátrico): son compartidos por todas las instancias generadas en una clase.
	
Métodos (de instancia):

	- Método: función que pertenece a un objeto.
	- self como primer argumento.
	
Otros métodos:
	
	- Métodos de clase -> cls en vez de self
	- Métodos estáticos @staticmethod -> no self ni cls.
	
	- Getters y setters: consultar y modificar atributos internos de los objetos.
		- En matplotlib, set (xlim, ylim, xlabel, etc.)
	- Métodos especiales: asociados a acciones de Python y pueden ser definidos por necesidad.
		- La mayoría de los métodos especiales no se utilizan tan frecuentemente.
		- Todos los operadores tienen asignado un método.
		- Puedo implementar dentro de la clase los operadores. 
	*Objetivo de la clase: crear clases y algo más...
	
Clases de datos:
	- Para definir un tipo de clase más simple, que sólo sirva de empaquetador de datos.

Herencia: metafísica class. Abstracciómmm.
	- Proceso natural, capacidad de definir un objeto a partir de otro que ya está definido.
	- Creación de clases a través de herencia.

Clase 03 de octubre:

- La función super(): sirve para llamar métodos de la clase base. Es la única función que rompe las reglas de Python (según el Cris), porque trata una función como un objeto.

- Namemangling dificulta el acceso a una clase, emular el comportamiento de un atributo protegido.

- Polimorfismo: Ditto de la programación. En Python, un objeto de una clase puede ser tratado como de otra clase relacionada. Me permite usar objetos de diferente clase como si fueran iguales.

- Herencia múltiple: capacidad de generar una clase derivada utilizando no solo una clase base, sino que múltiples.
	- MRO nos devuelve una lista relacionada al orden que sigue para buscar referencias. Crucial para solucionar potenciales problemas de Herencia múltiple.

- Objetos compuestos: utilizar objetos como atributos de otro. Not verbo to be -> verbo have.




	
	
	
	
